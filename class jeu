

class JeuCasseBrique:
    def __init__(self):
      

        self.root = tk.Tk()
        self.root.title("Jeu du casse-briques")
        self.root.configure(bg="bisque")

        self.canvas_width = 720
        self.canvas_height = 400

        self.canvas = tk.Canvas(self.root, width=self.canvas_width, height=self.canvas_height, bg="black")
        self.canvas.pack(fill="both", expand=True ,pady=20)
        # Afficher l'image de démarrage
        pil_image = Image.open("asset/image.png")
        pil_image = pil_image.resize((self.canvas_width, self.canvas_height))
        self.image_bg_orig = pil_image  # conserver l'image originale pour redimensionner
        self.image_bg = ImageTk.PhotoImage(self.image_bg_orig)
        self.bg_id = self.canvas.create_image(0, 0, anchor="nw", image=self.image_bg)

         # Boutons de commande
        self.regles_button = tk.Button(self.root, text="Règles", command=self.afficher_regles)
        self.regles_button.pack(side=tk.LEFT, padx=5, pady=5)

        self.bouton_commencer = tk.Button(self.root, text="Commencer", command=self.lancer_jeu)
        self.bouton_commencer.pack(side=tk.LEFT, padx=5, pady=5)

        self.quit_button = tk.Button(self.root, text="Quitter", command=self.root.destroy)
        self.quit_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Attributs de jeu
        self.gestion_brique = None
        self.plateforme = None
        self.plat_id = None
        self.score_systeme = None
        self.score = 0
        self.vies = 3
        self.balle = None
        self.controle = None
        self._running = False
    

        # Met à jour les dimensions effectives du canvas
        self.root.update_idletasks()

    def afficher_regles(self):
        """Afficher les règles du jeu dans une boîte de dialogue"""
        regles_texte = (
            "Règles du jeu du casse-briques :\n\n"
            "1. Déplacez la plateforme avec les flèches gauche et droite.\n"
            "2. Faites rebondir la balle sur la plateforme pour casser les briques.\n"
            "3. Chaque brique détruite rapporte 10 points.\n"
            "4. Vous avez 3 vies. La balle qui tombe en bas du canvas fait perdre une vie.\n"
            "5. Le jeu se termine quand toutes les briques sont détruites ou que vous perdez toutes vos vies."
        )
        messagebox.showinfo("Règles du jeu", regles_texte)
    


    def lancer_jeu(self):
        """Démarre (ou redémarre) une partie."""
        # Supprimer l'image de démarrage
        self.canvas.delete(self.bg_id)

        self.bouton_commencer.config(state="disabled")
        # nettoyer l'aire de jeu si reprise
        self.canvas.delete("all")

        # (1) Création des briques
        self.gestion_brique = CreationBrique(self.canvas)
        self.gestion_brique.creer_briques()

        # (2) Création de la plateforme
        self.plateforme = MouvementPlateforme(self.canvas)
        self.plat_id = self.plateforme.creer_plateforme()

        # (3) Réinitialiser le score et les vies
        # détruire l'ancien widget score s'il existe (pour éviter d'empiler)
        if self.score_systeme is not None:
            try:
                self.score_systeme.frame.destroy()
            except Exception:
                pass
        self.score_systeme = Score(self.root)
        self.score_systeme.pack()
        self.score = 0
        self.vies = 3
        self.score_systeme.modifier(score=self.score, vies=self.vies)

        # (4) Réinitialiser / créer la balle
        start_x = (240 + 360) / 2
        start_y = 350
        self.balle = CreationBalle(self.canvas, start_x, start_y, rayon=8, vitesse=6)

        # (5) Préparer le contrôle clavier :
        #    pour éviter d'empiler plusieurs bindings, on supprime les anciens bindings
        for seq in ("<Left>", "<Right>", "<KeyRelease-Left>", "<KeyRelease-Right>"):
            try:
                self.root.unbind(seq)
            except Exception:
                pass
        self.controle = DeplacementClavierplateforme(self.root, self.plateforme)

        # (6) Lancer la boucle de jeu
        self._running = True
        # lancer la boucle de jeu immédiatement
        self.game_loop()

    def game_loop(self):
        if not self._running:
            return

        # Protection si la balle n'existe pas
        if not self.balle:
            return

        # Déplacement de la balle et récupération coordonnées
        self.balle.move()
        bx, by = self.balle.x, self.balle.y
        r = self.balle.rayon

        # Rebonds sur les murs
        if bx - r <= 0:
            self.balle.vx = abs(self.balle.vx)
        if bx + r >= self.canvas_width:
            self.balle.vx = -abs(self.balle.vx)
        if by - r <= 0:
            self.balle.vy = abs(self.balle.vy)

        # Rebond sur la plateforme (si présente)
        if self.plat_id is not None:
            coords = self.canvas.coords(self.plat_id)
            if len(coords) == 4:
                px1, py1, px2, py2 = coords
                # On considère rebond seulement si la balle descend (vy > 0)
                if (py1 - r <= by <= py2) and (px1 <= bx <= px2) and self.balle.vy > 0:
                    self.balle.vy = -abs(self.balle.vy)
                    # effet d'angle
                    centre_plat = (px1 + px2) / 2
                    half_width = (px2 - px1) / 2 if (px2 - px1) != 0 else 1
                    offset = (bx - centre_plat) / half_width
                    self.balle.vx = self.balle.vitesse * offset

        # Collision avec une brique
        if self.gestion_brique and self.gestion_brique.supprimer_brique(bx, by):
            self.balle.vy = -self.balle.vy
            self.score += 10
            if self.score_systeme:
                self.score_systeme.modifier(score=self.score)

        # Si la balle tombe sous le canvas
        if by - r > self.canvas_height:
            self.vies -= 1
            if self.score_systeme:
                self.score_systeme.modifier(vies=self.vies)
            if self.vies <= 0:
                self.canvas.create_text(self.canvas_width/2, self.canvas_height/2,
                                        text="GAME OVER", fill="white", font=("Arial", 28, "bold"))
                self.bouton_commencer.config(state="normal")
                self._running = False
                return
            else:
                self.reinitialiser_balle()

        # Si toutes les briques sont détruites -> victoire
        if self.gestion_brique and not self.gestion_brique.briques:
            self.canvas.create_text(self.canvas_width/2, self.canvas_height/2,
                                    text="VICTOIRE !", fill="yellow", font=("Arial", 28, "bold"))
            self.bouton_commencer.config(state="normal")
            self._running = False
            return

        # Prochain tick (~60 FPS)
        self.root.after(16, self.game_loop)

    def reinitialiser_balle(self):
        start_x = (240 + 360) / 2
        start_y = 350
        if not self.balle:
            # recréer la balle si nécessaire
            self.balle = CreationBalle(self.canvas, start_x, start_y, rayon=8, vitesse=6)
            return

        self.balle.x = start_x
        self.balle.y = start_y
        self.balle.vx = random.choice([-4, 4])
        self.balle.vy = -4
        # mettre à jour coords graphiques si l'id existe
        self.canvas.coords(
        self.balle.id,
        self.balle.x - self.balle.rayon, self.balle.y - self.balle.rayon,
        self.balle.x + self.balle.rayon, self.balle.y + self.balle.rayon
    )
    

    def executer(self):
        self.root.mainloop()