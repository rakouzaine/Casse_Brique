def on_begin():
    """Lance la partie du casse-brique."""
    begin_button.config(state="disabled") #l’utilisateur ne peut plus cliquer dessus une fois la partie commencée.
    #canvas.delete("all")

    # Création des éléments du jeu
    gestion_brique = Creation_Brique(canvas)
    gestion_brique.create_brique()

    plateforme = MouvementPlateforme(canvas)
    plat_id = plateforme.plateforme()

    controle = Deplacement_Clavier_plateforme(root, plateforme)

    score_systeme = Score(root)
    score_systeme.pack()
    score = 0
    vies = 3
    score_systeme.modifier(score=score, vies=vies)

    # Centre de départ de la balle (au-dessus de la plateforme)
    start_x = (240 + 360) / 2
    start_y = 350

    balle = Creation_Balle(canvas, start_x, start_y, rayon=8, vitesse=6)

    # Boucle de jeu
    def game_loop():
        nonlocal score, vies

        balle.move()
        bx, by = balle.x, balle.y
        r = balle.rayon

        # Rebonds sur les murs
        if bx - r <= 0:
            balle.vx = abs(balle.vx)
        if bx + r >= canvas_width:
            balle.vx = -abs(balle.vx)
        if by - r <= 0:
            balle.vy = abs(balle.vy)

        # Rebond sur la plateforme (simple test par centre de la balle)
        px1, py1, px2, py2 = canvas.coords(plat_id)
        # On considère rebond seulement si la balle descend (vy > 0)
        if  (py1 - r <= by <= py2) and (px1 <= bx <= px2):
            balle.vy = -abs(balle.vy)
            # effet d'angle
            centre_plat = (px1 + px2) / 2
            offset = (bx - centre_plat) / ((px2 - px1) / 2)
            balle.vx = balle.vitesse * offset

        # Collision avec une brique (on teste le centre)
        if gestion_brique.brick_hit_at(bx, by):
            balle.vy = -balle.vy
            score += 10
            score_systeme.modifier(score=score)

        # Si la balle tombe
        if by - r > canvas_height:
            vies -= 1
            score_systeme.modifier(vies=vies)
            if vies <= 0:
                canvas.create_text(canvas_width/2, canvas_height/2, text="GAME OVER",
                                   fill="white", font=("Arial", 28, "bold"))
                begin_button.config(state="normal")
                return
            else:
                # remettre la balle au-dessus de la plateforme
                balle.x = start_x
                balle.y = start_y
                balle.vx = random.choice([-4, 4])
                balle.vy = -4
                # mettre à jour coords graphiques
                canvas.coords(balle.id, balle.x-balle.rayon, balle.y-balle.rayon,
                              balle.x+balle.rayon, balle.y+balle.rayon)

        # Si toutes les briques sont détruites
        if not gestion_brique.bricks:
            canvas.create_text(canvas_width/2, canvas_height/2, text="VICTOIRE !",
                               fill="yellow", font=("Arial", 28, "bold"))
            begin_button.config(state="normal")
            return

        # Prochain tick (~60 FPS)
        root.after(16, game_loop)

    # Lancer la boucle principale du jeu
    game_loop()


# Attacher la fonction au bouton (après sa définition)
begin_button.config(command=on_begin)

# Lancer la fenêtre
if __name__ == "__main__":
    root.mainloop()