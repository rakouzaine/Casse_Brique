def lancer_jeu(self):
        """Démarre (ou redémarre) une partie."""
        # Supprimer l'image de démarrage
        self.canvas.delete(self.bg_id)

        self.bouton_commencer.config(state="disabled")
        # nettoyer l'aire de jeu si reprise
        self.canvas.delete("all")

        # (1) Création des briques
        self.gestion_brique = CreationBrique(self.canvas)
        self.gestion_brique.creer_briques()

        # (2) Création de la plateforme
        self.plateforme = MouvementPlateforme(self.canvas)
        self.plat_id = self.plateforme.creer_plateforme()

        # (3) Réinitialiser le score et les vies
        # détruire l'ancien widget score s'il existe (pour éviter d'empiler)
        if self.score_systeme is not None:
            try:
                self.score_systeme.frame.destroy()
            except Exception:
                pass
        self.score_systeme = Score(self.root)
        self.score_systeme.pack()
        self.score = 0
        self.vies = 3
        self.score_systeme.modifier(score=self.score, vies=self.vies)

        # (4) Réinitialiser / créer la balle
        start_x = (240 + 360) / 2
        start_y = 350
        self.balle = CreationBalle(self.canvas, start_x, start_y, rayon=8, vitesse=6)

        # (5) Préparer le contrôle clavier :
        #    pour éviter d'empiler plusieurs bindings, on supprime les anciens bindings
        for seq in ("<Left>", "<Right>", "<KeyRelease-Left>", "<KeyRelease-Right>"):
            try:
                self.root.unbind(seq)
            except Exception:
                pass
        self.controle = DeplacementClavierplateforme(self.root, self.plateforme)

        # (6) Lancer la boucle de jeu
        self._running = True
        # lancer la boucle de jeu immédiatement
        self.game_loop()

    def game_loop(self):
        if not self._running:
            return

        # Protection si la balle n'existe pas
        if not self.balle:
            return

        # Déplacement de la balle et récupération coordonnées
        self.balle.move()
        bx, by = self.balle.x, self.balle.y
        r = self.balle.rayon

        # Rebonds sur les murs
        if bx - r <= 0:
            self.balle.vx = abs(self.balle.vx)
        if bx + r >= self.canvas_width:
            self.balle.vx = -abs(self.balle.vx)
        if by - r <= 0:
            self.balle.vy = abs(self.balle.vy)

        # Rebond sur la plateforme (si présente)
        if self.plat_id is not None:
            coords = self.canvas.coords(self.plat_id)
            if len(coords) == 4:
                px1, py1, px2, py2 = coords
                # On considère rebond seulement si la balle descend (vy > 0)
                if (py1 - r <= by <= py2) and (px1 <= bx <= px2) and self.balle.vy > 0:
                    self.balle.vy = -abs(self.balle.vy)
                    # effet d'angle
                    centre_plat = (px1 + px2) / 2
                    half_width = (px2 - px1) / 2 if (px2 - px1) != 0 else 1
                    offset = (bx - centre_plat) / half_width
                    self.balle.vx = self.balle.vitesse * offset

        # Collision avec une brique
        if self.gestion_brique and self.gestion_brique.supprimer_brique(bx, by):
            self.balle.vy = -self.balle.vy
            self.score += 10
            if self.score_systeme:
                self.score_systeme.modifier(score=self.score)

        # Si la balle tombe sous le canvas
        if by - r > self.canvas_height:
            self.vies -= 1
            if self.score_systeme:
                self.score_systeme.modifier(vies=self.vies)
            if self.vies <= 0:
                self.canvas.create_text(self.canvas_width/2, self.canvas_height/2,
                                        text="GAME OVER", fill="white", font=("Arial", 28, "bold"))
                self.bouton_commencer.config(state="normal")
                self._running = False
                return
            else:
                self.reinitialiser_balle()

        # Si toutes les briques sont détruites -> victoire
        if self.gestion_brique and not self.gestion_brique.briques:
            self.canvas.create_text(self.canvas_width/2, self.canvas_height/2,
                                    text="VICTOIRE !", fill="yellow", font=("Arial", 28, "bold"))
            self.bouton_commencer.config(state="normal")
            self._running = False
            return

        # Prochain tick (~60 FPS)
        self.root.after(16, self.game_loop)

    def reinitialiser_balle(self):
        start_x = (240 + 360) / 2
        start_y = 350
        if not self.balle:
            # recréer la balle si nécessaire
            self.balle = CreationBalle(self.canvas, start_x, start_y, rayon=8, vitesse=6)
            return

        self.balle.x = start_x
        self.balle.y = start_y
        self.balle.vx = random.choice([-4, 4])
        self.balle.vy = -4
        # mettre à jour coords graphiques si l'id existe
        self.canvas.coords(
        self.balle.id,
        self.balle.x - self.balle.rayon, self.balle.y - self.balle.rayon,
        self.balle.x + self.balle.rayon, self.balle.y + self.balle.rayon
    )
    

    def executer(self):
        self.root.mainloop()
if __name__ == "__main__":
    jeu = JeuCasseBrique()
    jeu.executer()